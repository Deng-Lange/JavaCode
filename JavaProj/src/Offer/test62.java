package Offer;

public class test62 {
    //0,1,···,n-1 这 n 个数字排成一个圆圈，从数字 0 开始，
    //每次从这个圆圈里删除第 m 个数字（删除后从下一个数字开始计数）。
    //求出这个圆圈里剩下的最后一个数字。
    //例如，0、1、2、3、4 这 5 个数字组成一个圆圈，从数字 0 开始每次删除第 3 个数字，
    //则删除的前 4 个数字依次是2、0、4、1，因此最后剩下的数字是 3。
    /*
    动态规划解析：
    1、状态定义：设「i,m 问题」的解为 dp[i]；
    2、转移方程：通过以下公式可从 dp[i−1] 递推得到 dp[i]；
             dp[i]=(dp[i−1]+m)%i
    3、初始状态：「1,m 问题」的解恒为 0，即 dp[1]=0；
    4、返回值：返回「n,m 问题」的解 dp[n]；
     */
    public int lastRemaining(int n, int m) {
        int x = 0;
        for (int i = 2; i <= n; i++) {
            x = (x + m) % i;
        }
        return x;
    }
}
