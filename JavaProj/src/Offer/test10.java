package Offer;

public class test10 {
    //写一个函数，输入 n，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）
    /*
    动态规划：
    求余运算规则：设正整数 x，y，p，求余符号为 ⊙
    则有 (x + y) ⊙ p = (x ⊙ p + y ⊙ p) ⊙ p
    根据以上规则，可推出 f(n) ⊙ p = [f(n-1) ⊙ p + f(n-2) ⊙ p] ⊙ p
    从而可以在循环过程中每次计算 sum = (a + b) ⊙ 1000000007
    此操作与最终返回前取余等价
     */
    public int fib(int n) {
        int a = 0, b = 1, sum;
        for(int i = 0; i < n; i++){
            sum = (a + b) % 1000000007;
            a = b;
            b = sum;
        }
        return a;
    }
    //一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级台阶
    //求该青蛙跳上一个 n 级的台阶总共有多少种跳法
    /*
    动态规划：
    设跳上 n 级台阶有 f(n) 种跳法
    在所有跳法中，青蛙的最后一步只有两种情况： 跳上 1 级或 2 级台阶
    当为 1 级台阶： 剩 n−1 个台阶，此情况共有 f(n−1) 种跳法
    当为 2 级台阶： 剩 n−2 个台阶，此情况共有 f(n−2) 种跳法
    f(n) 为以上两种情况之和，即 f(n)=f(n-1)+f(n-2)
    以上递推性质为斐波那契数列，本题可转化为求斐波那契数列第 n 项的值，唯一的不同在于起始数字不同
    青蛙跳台阶问题：f(0)=1，f(1)=1，f(2)=2
    斐波那契数列问题：f(0)=0，f(1)=1，f(2)=1
     */
    public int numWays(int n) {
        int a = 1, b = 1, sum;
        for(int i = 0; i < n; i++){
            sum = (a + b) % 1000000007;
            a = b;
            b = sum;
        }
        return a;
    }
}
